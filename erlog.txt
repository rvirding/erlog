MODULE

	erlog

MODULE SUMMARY

	Interpreter for sub-set of Prolog

DESCRIPTION

	Erlog is a Prolog interpreter implemented in Erlang and
	integrated with the Erlang runtime system.

EXPORTS

erlog:new() -> Erlog()

	Start a new Erlog interpreter. The intrepreter is a function
	which can be called with the following valid arguments:

	Erlog({prove,Goal}) -> {ProveRet,Erlog()}.
	Erlog(next_solution) -> {ProveRet,Erlog()}.

	where ProveRet = {succeed,VarBindings} | fail | Error.

	Goal can also be a list of goals here to simplify writing
	conjunctions.

	Erlog({consult,FileName} -> {ok,Erlog()} | {Error,Erlog()}.
	Erlog({reconsult,FileName} -> {ok,Erlog()} | {Error,Erlog()}.

	Erlog(get_db) -> {{ok,Database},Erlog()}.
	Erlog({set_db,Database}) -> {ok,Erlog()}.

	Get/set the database used by the interpreter to Database.
	These functions can be used to save and quickly restore the
	database to a predefined state.

	Erlog(halt) -> ok.
	This ends the interpreter.

erlog:start() -> Eint.
erlog:start_link() -> Eint.
erlog:prove(Eint, Goal) -> {succeed,VarBindings} | fail | Error.
erlog:next_solution(Eint) -> {succeed,VarBindings} | fail | Error.
erlog:consult(Eint, FileName) -> ok | Error.
erlog:reconsult(Eint, FileName) -> ok | Error.
erlog:get_db(Eint) -> {ok,Database}.
erlog:set_db(Eint, Database) -> ok.
erlog:halt(Eint) -> ok.

	These functions run the Erlog interpreter as a separate
	process, the interface functions correspond to the valid
	arguments to the Erlog interpeter function above.

erlog:is_legal_term(Term) -> bool().

	Test if Term is a well-formed (legal) Erlog structure.

erlog:vars_in(Term) -> [{VarName,Variable}].

	Returns a list of {VariableName,Variable} pairs.

erlog_parse:term([Token]) -> {ok,Term} | {error,ErrorDescriptor}.
erlog_parse:term([Token], LineNo) -> {ok,Term} | {error,ErrorDescriptor}.

	Parse a list of Erlang tokens as a Prolog term. The line
	number (default 1) is used when returning errors.
	ErrorDescriptor has the format:

	{LineNo,ModuleName,Error}

erlog_scan:string(String) -> {ok,[Token],Line} | {error,Error,LineNo}.
erlog_scan:string(String, Line) -> {ok,[Token],Line} | {error,Error,Line}.

	Scan String and return a list of tokens.

erlog_scan:token(Continuation, Chars, Line) ->
	{more,Continuation} | {done,ReturnVal,RestChars}.

	Re-entrant scanner to scan one token. Compatible with io system.

erlog_scan:tokens(Continuation, Chars, Line) ->
	{more,Continuation} | {done,ReturnVal,RestChars}.

	Re-entrant scanner to scan tokens upto an end token.
	Compatible with io system.

AUTHOR

	Robert Virding - robert.virding@telia.com
	(with thanks to Richard O'Keefe for explaining some finer
	points of the Prolog standard)
